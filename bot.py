import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === CONFIGURA√á√ïES DO BOT ===
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå A vari√°vel de ambiente BOT_TOKEN n√£o est√° definida!")

# === LOGGING CONFIGURADO ===
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === COMANDOS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    await update.message.reply_text(
        "üëã Ol√°! Sou seu bot e estou pronto para te ajudar!\n"
        "Use /ajuda para ver os comandos dispon√≠veis."
    )

async def ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /ajuda"""
    await update.message.reply_text(
        "‚ÑπÔ∏è Comandos dispon√≠veis:\n"
        "/start - Inicia o bot\n"
        "/ajuda - Mostra esta mensagem\n"
        "Ou envie qualquer mensagem para eu repetir!"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Responde o que o usu√°rio digitar"""
    texto = update.message.text
    await update.message.reply_text(f"Voc√™ disse: {texto}")

# === FUN√á√ÉO PRINCIPAL ===
def main():
    logging.info("üöÄ Iniciando bot...")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # Adiciona os handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ajuda", ajuda))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    logging.info("‚úÖ Bot iniciado e aguardando mensagens...")
    app.run_polling(close_loop=False)  # evita o erro do loop no Render

# === EXECU√á√ÉO ===
if __name__ == "__main__":
    main()
