import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

# =========================
# üîß CONFIGURA√á√ïES INICIAIS
# =========================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN n√£o configurado no Railway!")

app = Flask(__name__)
scheduler = BackgroundScheduler()
application = Application.builder().token(TOKEN).build()

# =====================================
# ü§ñ COMANDOS DO TELEGRAM
# =====================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Bot ativo e pronto para postar ofertas! Use /start_posting para iniciar as postagens autom√°ticas.")

async def start_posting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ Postagens autom√°ticas iniciadas!")
    # Aqui voc√™ pode chamar sua fun√ß√£o de buscar e postar ofertas manualmente se quiser.
    # Exemplo: await postar_oferta()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("start_posting", start_posting))

# =====================================
# üîÅ FUN√á√ÉO AUTOM√ÅTICA (POSTAR OFERTAS)
# =====================================

async def postar_oferta():
    logger.info("ü§ñ Buscando e postando ofertas automaticamente...")
    # Aqui entraria a integra√ß√£o com Shopee / Mercado Livre
    # Exemplo: ofertas = buscar_produtos()
    # await bot.send_message(chat_id=SEU_CHAT_ID, text=f"Nova oferta: {ofertas[0]['titulo']}")
    pass

# Agendador autom√°tico (a cada 2 minutos)
scheduler.add_job(lambda: asyncio.run(postar_oferta()), "interval", minutes=2)
scheduler.start()

# =====================================
# üåê FLASK WEBHOOK
# =====================================

@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    """Recebe atualiza√ß√µes do Telegram e as repassa ao bot."""
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok", 200

@app.route("/")
def index():
    return "ü§ñ Bot est√° rodando com Flask + Webhook!", 200

# =====================================
# üöÄ EXECU√á√ÉO
# =====================================

if __name__ == "__main__":
    logger.info("üßπ Limpando webhooks antigos...")
    loop = asyncio.get_event_loop()
    loop.run_until_complete(application.bot.delete_webhook(drop_pending_updates=True))

    logger.info("üåç Configurando webhook atual...")
    webhook_url = f"https://amazon-ofertas-api.up.railway.app/webhook/{TOKEN}"
    loop.run_until_complete(application.bot.set_webhook(url=webhook_url))
    logger.info(f"‚úÖ Webhook configurado: {webhook_url}")

    logger.info("üöÄ Bot iniciado e escutando comandos!")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
